AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS resources for MedFoyer backend
Parameters: 
        EnvType: 
                Description: Environment type.
                Default: sandbox
                Type: String
                AllowedValues: 
                        - prod
                        - dev
                        - sandbox
                ConstraintDescription: must specify valid stage [prod|dev|sandbox].
        DatabaseStage:
                Description: Stage of database to use.
                Default: SANDBOX
                Type: String
                AllowedValues:
                        - PROD
                        - DEV
                        - SANDBOX
                ConstraintDescription: must specify valid stage [PROD|DEV|SANDBOX].
        GraphApiCognitoAppId:
                Type: String
                Description: Cognito Application(s) used for authenticating to GraphAPI
                Default: 2ltoku7mtgrcr7av6b4f78iue3
        GraphApiUserPoolId:
                Type: String
                Description: Cognito User Pool used for authenticating to GraphAPI
                Default: us-west-2_QH96yFFpV
        DefaultLambdaTimeout:
                Type: Number
                Description: Timeout on Lambda functions when not directly defined on function
                Default: 60

Globals:
        Function:
                Environment:
                        Variables:
                                STAGE: !Sub "${EnvType}"
                                USER_POOL_ID: !Sub "${GraphApiUserPoolId}"
                Timeout: !Ref DefaultLambdaTimeout

Mappings:
        AppSync:
                RequestMappings:
                        LambdaAddClinic: |
                                #set($unused = $context.args.put("clinic_id", $context.identity.claims.clinic_id))
                                {
                                  "version" : "2017-02-28",
                                  "operation": "Invoke",
                                  "payload": $util.toJson($context.args)
                                }
                        DynamoScopedClinicPut: |
                                #set($${id} = $ctx.args.patient.put("clinic_id", $ctx.identity.claims.clinic_id))

                                {
                                    "version" : "2017-02-28",
                                    "operation" : "PutItem",
                                    "key" : {
                                        ## If object "id" should come from GraphQL arguments, change to $util.dynamodb.toDynamoDBJson($ctx.args.id)
                                        "${id}": $util.dynamodb.toDynamoDBJson($util.autoId()),
                                    },
                                    "attributeValues" : $util.dynamodb.toMapValuesJson($ctx.args.${entity})
                                }
                        DynamoScopedClinicDelete: |
                                #set($clinic_id = $ctx.identity.claims.clinic_id)

                                {
                                    "version" : "2017-02-28",
                                    "operation" : "DeleteItem",
                                    "key" : {
                                        ## If your table's hash key is not named 'id', update it here. **
                                        "${id}" : { "S" : "${!ctx.args.${id}}" }
                                        ## If your table has a sort key, add it as an item here. **
                                    },
                                    "condition" : {
                                        "expression" : "clinic_id = :clinic_id",
                                        "expressionValues" : {":clinic_id" : $util.dynamodb.toDynamoDBJson($clinic_id)}
                                    }
                                }
                        DynamoGenericGet: |
                                {
                                    "version": "2017-02-28",
                                    "operation": "GetItem",
                                    "key": {
                                        "${id}": $util.dynamodb.toDynamoDBJson($ctx.args.get($id)),
                                    }
                                }

                ResponseMappings:
                        LambdaGeneric: |
                                $util.toJson($context.result)
                        DynamoScopedClinicGet: |
                                #set( $clinic_id = $context.identity.claims.clinic_id )
                                #if($context.result["clinic_id"] == "$clinic_id")
                                    $util.toJson($ctx.result)
                                #end
                        DynamoGenericList: |
                                $util.toJson($ctx.result.items)
                        DynamoUnscopedAdminGet: |
                                $util.toJson($ctx.result)


Resources:
        GraphApi:
                Type: AWS::AppSync::GraphQLApi
                Properties:
                        AuthenticationType: AMAZON_COGNITO_USER_POOLS
                        Name: !Sub "${EnvType} GraphQL API"
                        UserPoolConfig:
                                AppIdClientRegex: 2ltoku7mtgrcr7av6b4f78iue3
                                AwsRegion: us-west-2
                                DefaultAction: ALLOW
                                UserPoolId: us-west-2_QH96yFFpV
        PatientApi:
                Type: AWS::Serverless::Api
                Properties:
                        StageName: !Ref EnvType
                        Cors:
                                AllowMethods: "'POST, GET, OPTIONS'"
                                AllowHeaders: "'X-Forwarded-For,X-Auth-Token,Content-Type,Accept'"
                                AllowOrigin: "'*'"
                                AllowCredentials: False
        GetAppointment:
                Type: AWS::Serverless::Function
                Properties:
                        FunctionName: !Sub "${EnvType}-get-appointment"
                        Handler: handlers/appointment.handler
                        Runtime: python3.8
                        CodeUri: ./
        CheckInAppointment:
                Type: AWS::Serverless::Function
                Properties:
                        FunctionName: !Sub "${EnvType}-check-in-appointment"
                        Policies:
                                - AmazonDynamoDBFullAccess
                                - AmazonSSMReadOnlyAccess
                        Handler: handlers/appointment.check_in_handler
                        Runtime: python3.8
                        CodeUri: ./
                        Events:
                                CheckInAppointmentApi:
                                        Type: Api
                                        Properties:
                                                RestApiId: !Ref PatientApi
                                                Path: /CheckInAppointment
                                                Method: POST
        SubmitAppointmentForm:
                Type: AWS::Serverless::Function
                Properties:
                        FunctionName: !Sub "${EnvType}-submit-appointment-form"
                        Policies:
                                - AmazonDynamoDBFullAccess
                                - AmazonS3FullAccess
                                - AmazonSSMReadOnlyAccess
                        Handler: handlers/appointment.submit_form_handler
                        Runtime: python3.8
                        CodeUri: ./
                        Events:
                                SubmitAppointmentApi:
                                        Type: Api
                                        Properties:
                                                RestApiId: !Ref PatientApi
                                                Path: /SubmitAppointmentForm
                                                Method: POST
        GetForms:
                Type: AWS::Serverless::Function
                Properties:
                        FunctionName: !Sub "${EnvType}-get-forms"
                        Policies:
                                - AmazonS3FullAccess
                        Handler: handlers/appointment.get_forms_handler
                        Runtime: python3.8
                        CodeUri: ./
        SummonPatient:
                Type: AWS::Serverless::Function
                Properties:
                        FunctionName: !Sub "${EnvType}-summon-patient-appointment"
                        Policies:
                                - AmazonDynamoDBFullAccess
                                - AmazonSSMReadOnlyAccess
                        Handler: handlers/appointment.summon_patient_handler
                        Runtime: python3.8
                        CodeUri: ./
                        Timeout: 10
        GetWaitlistPriority:
                Type: AWS::Serverless::Function
                Properties:
                        FunctionName: !Sub "${EnvType}-get-waitlist-position"
                        Policies:
                                - AmazonDynamoDBFullAccess
                                - AmazonSSMReadOnlyAccess
                        Handler: handlers/appointment.get_waitlist_position_handler
                        Runtime: python3.8
                        CodeUri: ./
                        Events:
                                GetWaitlistPriorityApi:
                                        Type: Api
                                        Properties:
                                                RestApiId: !Ref PatientApi
                                                Path: /Waitlist
                                                Method: GET
        AddUserClaims:
                Type: AWS::Serverless::Function
                Properties:
                        FunctionName: !Sub "${EnvType}-add-user-claims"
                        Handler: handlers/auth.claim_add_handler
                        Runtime: python3.8
                        CodeUri: ./

        CreateUser:
                Type: AWS::Serverless::Function
                Properties:
                        FunctionName: !Sub "${EnvType}-create-user"
                        Handler: handlers/users.create_user_handler
                        Runtime: python3.8
                        CodeUri: ./
                        Role: !GetAtt CognitoAdminRole.Arn

        DeleteUser:
                Type: AWS::Serverless::Function
                Properties:
                        FunctionName: !Sub "${EnvType}-delete-user"
                        Handler: handlers/users.delete_user_handler
                        Runtime: python3.8
                        CodeUri: ./
                        Role: !GetAtt CognitoAdminRole.Arn

        ListAppointments:
                Type: AWS::Serverless::Function
                Properties:
                        FunctionName: !Sub "${EnvType}-list-appointments"
                        Handler: handlers/appointment.list_appointments_handler
                        Runtime: python3.8
                        CodeUri: ./
                        Policies:
                                - AmazonDynamoDBFullAccess
                                - AmazonSSMReadOnlyAccess

        MakeUserSysAdmin:
                Type: AWS::Serverless::Function
                Properties:
                        FunctionName: !Sub "${EnvType}-make-user-sys-admin"
                        Handler: handlers/users.make_user_sys_admin_handler
                        Runtime: python3.8
                        CodeUri: ./
                        Role: !GetAtt CognitoAdminRole.Arn

        RemoveUserFromSysAdmins:
                Type: AWS::Serverless::Function
                Properties:
                        FunctionName: !Sub "${EnvType}-remove-user-from-sys-admins"
                        Handler: handlers/users.remove_user_from_sys_admins_handler
                        Runtime: python3.8
                        CodeUri: ./
                        Role: !GetAtt CognitoAdminRole.Arn

        SendAppointmentReminders:
                Type: AWS::Serverless::Function
                Properties:
                        FunctionName: !Sub "${EnvType}-send-appointment-reminders"
                        Policies:
                                - AmazonDynamoDBFullAccess
                                - AmazonSSMReadOnlyAccess
                        Handler: handlers/appointment.send_appointment_reminders_handler
                        Runtime: python3.8
                        CodeUri: ./
                        Timeout: 50
                        Events:
                                SARSchedule:
                                        Type: Schedule
                                        Properties:
                                                Schedule: 'rate(1 minute)'
                                                Name: !Sub "${EnvType}-send-appointment-reminders-schedule"
                                                Description: Schedule to send needed text messages
                                                Enabled: True
        SendCheckInText:
                Type: AWS::Serverless::Function
                Properties:
                        FunctionName: !Sub "${EnvType}-send-check-in-text"
                        Policies:
                                - AmazonDynamoDBFullAccess
                                - AmazonSSMReadOnlyAccess
                        Handler: handlers/appointment.send_check_in_text_handler
                        Runtime: python3.8
                        CodeUri: ./
                        Timeout: 10

        SendTelehealthText:
                Type: AWS::Serverless::Function
                Properties:
                        FunctionName: !Sub "${EnvType}-send-telehealth-text"
                        Policies:
                                - AmazonDynamoDBFullAccess
                                - AmazonSSMReadOnlyAccess
                        Handler: handlers/appointment.dispatch_telehealth_handler
                        Runtime: python3.8
                        CodeUri: ./
                        Timeout: 10

        AuthAppointment:
                Type: AWS::Serverless::Function
                Properties:
                        FunctionName: !Sub "${EnvType}-auth-appointment-handler"
                        Policies:
                                - AmazonDynamoDBFullAccess
                                - AmazonSSMReadOnlyAccess
                        Handler: handlers/auth.auth_appointment_handler
                        Runtime: python3.8
                        CodeUri: ./
                        Events:
                                AuthAppointmentApi:
                                        Type: Api
                                        Properties:
                                                RestApiId: !Ref PatientApi
                                                Path: /AuthAppointment
                                                Method: POST
        GetClinicLatLong:
                Type: AWS::Serverless::Function
                Properties:
                        FunctionName: !Sub "${EnvType}-get-clinic-lat-long-handler"
                        Policies:
                                - AmazonDynamoDBFullAccess
                                - AmazonSSMReadOnlyAccess
                        Handler: handlers/appointment.get_clinic_lat_long_handler
                        Runtime: python3.8
                        CodeUri: ./
                        Events:
                                GetClinicLatLongApi:
                                        Type: Api
                                        Properties:
                                                RestApiId: !Ref PatientApi
                                                Path: /ClinicLocation
                                                Method: GET

        LambdaDataSourceRole:
                Type: AWS::IAM::Role
                Properties:
                        AssumeRolePolicyDocument: |
                                {
                                  "Version": "2012-10-17",
                                  "Statement": [
                                    {
                                      "Effect": "Allow",
                                      "Principal": {
                                        "Service": "appsync.amazonaws.com"
                                      },
                                      "Action": "sts:AssumeRole"
                                    }
                                  ]
                                }
                        Path: !Sub "/${EnvType}/appsync/graphapi/"
                        Policies:
                                - PolicyName: lambda-invoke
                                  PolicyDocument: |
                                            {
                                                    "Version": "2012-10-17",
                                                    "Statement": [
                                                    {
                                                            "Effect": "Allow",
                                                            "Action": [
                                                                    "lambda:invokeFunction"
                                                            ],
                                                            "Resource": [
                                                                    "arn:aws:lambda:us-west-2:054609857756:function:*",
                                                                    "arn:aws:lambda:us-west-2:054609857756:function:*:*"
                                                            ]
                                                    }
                                                    ]
                                            }

        DynamoDataSourceRole:
                Type: AWS::IAM::Role
                Properties:
                        AssumeRolePolicyDocument: |
                                {
                                  "Version": "2012-10-17",
                                  "Statement": [
                                    {
                                      "Effect": "Allow",
                                      "Principal": {
                                        "Service": "appsync.amazonaws.com"
                                      },
                                      "Action": "sts:AssumeRole"
                                    }
                                  ]
                                }
                        Path: !Sub "/${EnvType}/appsync/graphapi/"
                        Policies:
                                - PolicyName: dynamo-access
                                  PolicyDocument: |
                                          {
                                              "Version": "2012-10-17",
                                              "Statement": [
                                                  {
                                                      "Effect": "Allow",
                                                      "Action": [
                                                          "dynamodb:DeleteItem",
                                                          "dynamodb:GetItem",
                                                          "dynamodb:PutItem",
                                                          "dynamodb:Query",
                                                          "dynamodb:Scan",
                                                          "dynamodb:UpdateItem"
                                                      ],
                                                      "Resource": [
                                                          "arn:aws:dynamodb:us-west-2:054609857756:table/*",
                                                          "arn:aws:dynamodb:us-west-2:054609857756:table/*/*"
                                                      ]
                                                  }
                                              ]
                                          }

        CognitoAdminRole:
                Type: AWS::IAM::Role
                Properties:
                        AssumeRolePolicyDocument: |
                                {
                                  "Version": "2012-10-17",
                                  "Statement": [
                                    {
                                      "Effect": "Allow",
                                      "Principal": {
                                        "Service": "lambda.amazonaws.com"
                                      },
                                      "Action": "sts:AssumeRole"
                                    }
                                  ]
                                }
                        Path: !Sub "/${EnvType}/lambda/admin/"
                        Policies:
                                - PolicyName: !Sub "${EnvType}-cognito-admin-access"
                                  PolicyDocument: !Sub |
                                          {
                                              "Version": "2012-10-17",
                                              "Statement": [
                                                  {
                                                      "Effect": "Allow",
                                                      "Action": [
                                                          "cognito-idp:AdminCreateUser",
                                                          "cognito-idp:AdminGetUser",
                                                          "cognito-idp:AdminDeleteUser",
                                                          "cognito-idp:AdminListGroupsForUser",
                                                          "cognito-idp:AdminListUsers",
                                                          "cognito-idp:AdminAddUserToGroup",
                                                          "cognito-idp:AdminRemoveUserFromGroup"
                                                      ],
                                                      "Resource": [
                                                          "arn:aws:cognito-idp:us-west-2:054609857756:userpool/${GraphApiUserPoolId}"
                                                      ]
                                                  }
                                              ]
                                          }

        AppointmentsDataSource:
                Type: AWS::AppSync::DataSource
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        Name: appointments_table
                        ServiceRoleArn: !GetAtt DynamoDataSourceRole.Arn
                        Type: AMAZON_DYNAMODB
                        DynamoDBConfig:
                                AwsRegion: us-west-2
                                TableName: !Sub "${DatabaseStage}_APPOINTMENTS"

        CreateAppointmentResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt AppointmentsDataSource.Name
                        FieldName: createAppointment
                        RequestMappingTemplate: |
                                #set($unused = $ctx.args.put("clinic_id", $ctx.identity.claims.clinic_id))
                                {
                                    "version" : "2017-02-28",
                                    "operation" : "PutItem",
                                    "key" : {
                                        ## If object "id" should come from GraphQL arguments, change to $util.dynamodb.toDynamoDBJson($ctx.args.id)
                                        "appointment_id": $util.dynamodb.toDynamoDBJson($util.autoId()),
                                    },
                                    "attributeValues" : $util.dynamodb.toMapValuesJson($ctx.args)
                                }
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, DynamoScopedClinicGet]
                        TypeName: Mutation

        GetAppointmentResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt AppointmentsDataSource.Name
                        FieldName: getAppointment
                        RequestMappingTemplate: !Sub
                                - |
                                        #set($id = "appointment_id")
                                        ${Template}
                                - Template: !FindInMap [AppSync, RequestMappings, DynamoGenericGet]
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, DynamoScopedClinicGet]
                        TypeName: Query

        ListAppointmentsDataSource:
                Type: AWS::AppSync::DataSource
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        LambdaConfig:
                                LambdaFunctionArn: !GetAtt ListAppointments.Arn
                        Name: list_appointments_lambda
                        ServiceRoleArn: !GetAtt LambdaDataSourceRole.Arn
                        Type: AWS_LAMBDA

        ListAppointmentsResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt ListAppointmentsDataSource.Name
                        FieldName: listAppointments
                        RequestMappingTemplate: !FindInMap [AppSync, RequestMappings, LambdaAddClinic]
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, LambdaGeneric]
                        TypeName: Query

        DeleteAppointmentResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt AppointmentsDataSource.Name
                        FieldName: deleteAppointment
                        RequestMappingTemplate: |
                                #set($clinic_id = $ctx.identity.claims.clinic_id)

                                {
                                    "version" : "2017-02-28",
                                    "operation" : "DeleteItem",
                                    "key" : {
                                        ## If your table's hash key is not named 'id', update it here. **
                                        "appointment_id" : { "S" : "${ctx.args.appointment_id}" }
                                        ## If your table has a sort key, add it as an item here. **
                                    },
                                    "condition" : {
                                        "expression" : "clinic_id = :clinic_id",
                                        "expressionValues" : {":clinic_id" : $util.dynamodb.toDynamoDBJson($clinic_id)}
                                    }
                                }
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, DynamoScopedClinicGet]
                        TypeName: Mutation

        PatientsDataSource:
                Type: AWS::AppSync::DataSource
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        Name: patients_table
                        ServiceRoleArn: !GetAtt DynamoDataSourceRole.Arn
                        Type: AMAZON_DYNAMODB
                        DynamoDBConfig:
                                AwsRegion: us-west-2
                                TableName: !Sub "${DatabaseStage}_PATIENTS"

        CreatePatientResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt PatientsDataSource.Name
                        FieldName: createPatient
                        RequestMappingTemplate: |
                                #set($patient = $ctx.args.patient.put("clinic_id", $ctx.identity.claims.clinic_id))

                                {
                                    "version" : "2017-02-28",
                                    "operation" : "PutItem",
                                    "key" : {
                                        ## If object "id" should come from GraphQL arguments, change to $util.dynamodb.toDynamoDBJson($ctx.args.id)
                                        "patient_id": $util.dynamodb.toDynamoDBJson($util.autoId()),
                                    },
                                    "attributeValues" : $util.dynamodb.toMapValuesJson($ctx.args.patient)
                                }
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, DynamoScopedClinicGet]
                        TypeName: Mutation

        GetPatientResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt PatientsDataSource.Name
                        FieldName: getPatient
                        RequestMappingTemplate: |
                                {
                                    "version": "2017-02-28",
                                    "operation": "GetItem",
                                    "key": {
                                        "patient_id": $util.dynamodb.toDynamoDBJson($ctx.args.patient_id),
                                    }
                                }
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, DynamoScopedClinicGet]
                        TypeName: Query

        GetPatientOnAppointmentResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt PatientsDataSource.Name
                        FieldName: patient
                        RequestMappingTemplate: |
                                {
                                    "version": "2017-02-28",
                                    "operation": "GetItem",
                                    "key": {
                                        "patient_id": $util.dynamodb.toDynamoDBJson($ctx.source.patient_id),
                                    }
                                }
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, DynamoScopedClinicGet]
                        TypeName: Appointment

        ListPatientsResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt PatientsDataSource.Name
                        FieldName: listPatients
                        RequestMappingTemplate: |
                                #set( $clinic_id = $ctx.identity.claims.clinic_id )

                                {
                                    "version" : "2017-02-28",
                                    "operation" : "Query",
                                    "index" : "clinic-index",
                                    "query" : {
                                        ## Provide a query expression. **
                                        "expression": "clinic_id = :id",
                                        "expressionValues" : {
                                            ":id" : $util.dynamodb.toDynamoDBJson($clinic_id)
                                        }
                                    }
                                }
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, DynamoGenericList]
                        TypeName: Query

        DeletePatientResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt PatientsDataSource.Name
                        FieldName: deletePatient
                        RequestMappingTemplate: |
                                #set($clinic_id = $ctx.identity.claims.clinic_id)

                                {
                                    "version" : "2017-02-28",
                                    "operation" : "DeleteItem",
                                    "key" : {
                                        ## If your table's hash key is not named 'id', update it here. **
                                        "patient_id" : { "S" : "${ctx.args.patient_id}" }
                                        ## If your table has a sort key, add it as an item here. **
                                    },
                                    "condition" : {
                                        "expression" : "clinic_id = :clinic_id",
                                        "expressionValues" : {":clinic_id" : $util.dynamodb.toDynamoDBJson($clinic_id)}
                                    }
                                }
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, DynamoScopedClinicGet]
                        TypeName: Mutation


        ClinicLocationsDataSource:
                Type: AWS::AppSync::DataSource
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        Name: clinic_locations_table
                        ServiceRoleArn: !GetAtt DynamoDataSourceRole.Arn
                        Type: AMAZON_DYNAMODB
                        DynamoDBConfig:
                                AwsRegion: us-west-2
                                TableName: !Sub "${DatabaseStage}_CLINIC_LOCATIONS"

        CreateClinicLocationsResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt ClinicLocationsDataSource.Name
                        FieldName: createClinicLocation
                        RequestMappingTemplate: |
                                #set( $clinic_id = $context.identity.claims.clinic_id )
                                {
                                    "version" : "2017-02-28",
                                    "operation" : "PutItem",
                                    "key" : {
                                        ## If object "id" should come from GraphQL arguments, change to $util.dynamodb.toDynamoDBJson($ctx.args.id)
                                        "clinic_id": $util.dynamodb.toDynamoDBJson($clinic_id),
                                        "clinic_location_id": $util.dynamodb.toDynamoDBJson($util.autoId())
                                    },
                                    "attributeValues" : $util.dynamodb.toMapValuesJson($ctx.args.clinic_location)
                                }
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, DynamoScopedClinicGet]
                        TypeName: Mutation

        GetClinicLocationsResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt ClinicLocationsDataSource.Name
                        FieldName: getClinicLocations
                        RequestMappingTemplate: |
                                #set( $clinic_id = $ctx.identity.claims.clinic_id )

                                {
                                    "version" : "2017-02-28",
                                    "operation" : "Query",
                                    "query" : {
                                        ## Provide a query expression. **
                                        "expression": "clinic_id = :id",
                                        "expressionValues" : {
                                            ":id" : $util.dynamodb.toDynamoDBJson($clinic_id)
                                        }
                                    }
                                }
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, DynamoGenericList]
                        TypeName: Query

        PractitionersDataSource:
                Type: AWS::AppSync::DataSource
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        Name: practitioners_table
                        ServiceRoleArn: !GetAtt DynamoDataSourceRole.Arn
                        Type: AMAZON_DYNAMODB
                        DynamoDBConfig:
                                AwsRegion: us-west-2
                                TableName: !Sub "${DatabaseStage}_PRACTITIONERS"

        CreatePractitionerResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt PractitionersDataSource.Name
                        FieldName: createPractitioner
                        RequestMappingTemplate: |
                                #set( $clinic_id = $context.identity.claims.clinic_id )
                                {
                                    "version" : "2017-02-28",
                                    "operation" : "PutItem",
                                    "key" : {
                                        ## If object "id" should come from GraphQL arguments, change to $util.dynamodb.toDynamoDBJson($ctx.args.id)
                                        "clinic_id": $util.dynamodb.toDynamoDBJson($clinic_id),
                                        "practitioner_id": $util.dynamodb.toDynamoDBJson($util.autoId())
                                    },
                                    "attributeValues" : $util.dynamodb.toMapValuesJson($ctx.args.practitioner)
                                }
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, DynamoScopedClinicGet]
                        TypeName: Mutation

        DeletePractitionerResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt PractitionersDataSource.Name
                        FieldName: deletePractitioner
                        RequestMappingTemplate: |
                                #set($clinic_id = $ctx.identity.claims.clinic_id)

                                {
                                    "version" : "2017-02-28",
                                    "operation" : "DeleteItem",
                                    "key" : {
                                        "practitioner_id" : $util.dynamodb.toDynamoDBJson($ctx.args.practitioner_id),
                                        "clinic_id" : $util.dynamodb.toDynamoDBJson($clinic_id)
                                    }
                                }
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, DynamoScopedClinicGet]
                        TypeName: Mutation

        ListPractitionersResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt PractitionersDataSource.Name
                        FieldName: listPractitioners
                        RequestMappingTemplate: |
                                #set( $clinic_id = $ctx.identity.claims.clinic_id )

                                {
                                    "version" : "2017-02-28",
                                    "operation" : "Query",
                                    "query" : {
                                        ## Provide a query expression. **
                                        "expression": "clinic_id = :id",
                                        "expressionValues" : {
                                            ":id" : $util.dynamodb.toDynamoDBJson($clinic_id)
                                        }
                                    }
                                }
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, DynamoGenericList]
                        TypeName: Query

        GetPractitionerResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt PractitionersDataSource.Name
                        FieldName: getPractitioner
                        RequestMappingTemplate: |
                                #set( $clinic_id = $ctx.identity.claims.clinic_id )
                                {
                                    "version": "2017-02-28",
                                    "operation": "GetItem",
                                    "key": {
                                        "clinic_id": $util.dynamodb.toDynamoDBJson($clinic_id),
                                        "practitioner_id": $util.dynamodb.toDynamoDBJson($ctx.args.practitioner_id),
                                    }
                                }
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, DynamoScopedClinicGet]
                        TypeName: Query

        GetPractitionerOnAppointmentResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt PractitionersDataSource.Name
                        FieldName: practitioner
                        RequestMappingTemplate: |
                                {
                                    "version": "2017-02-28",
                                    "operation": "GetItem",
                                    "key": {
                                        "practitioner_id": $util.dynamodb.toDynamoDBJson($ctx.source.practitioner_id),
                                        "clinic_id": $util.dynamodb.toDynamoDBJson($context.identity.claims.clinic_id)
                                    }
                                }
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, DynamoScopedClinicGet]
                        TypeName: Appointment


        ClinicsDataSource:
                Type: AWS::AppSync::DataSource
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        Name: clinics_table
                        ServiceRoleArn: !GetAtt DynamoDataSourceRole.Arn
                        Type: AMAZON_DYNAMODB
                        DynamoDBConfig:
                                AwsRegion: us-west-2
                                TableName: !Sub "${DatabaseStage}_CLINICS"

        CreateClinicsResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt ClinicsDataSource.Name
                        FieldName: createClinic
                        RequestMappingTemplate: |
                                {
                                    "version" : "2017-02-28",
                                    "operation" : "PutItem",
                                    "key" : {
                                        ## If object "id" should come from GraphQL arguments, change to $util.dynamodb.toDynamoDBJson($ctx.args.id)
                                        "clinic_id": $util.dynamodb.toDynamoDBJson($util.autoId()),
                                    },
                                    "attributeValues" : $util.dynamodb.toMapValuesJson($ctx.args.clinic)
                                }
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, DynamoUnscopedAdminGet]
                        TypeName: Mutation

        GetClinicResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt ClinicsDataSource.Name
                        FieldName: getClinic
                        RequestMappingTemplate: |
                                #set($clinic_id = $ctx.identity.claims.clinic_id)
                                {
                                    "version": "2017-02-28",
                                    "operation": "GetItem",
                                    "key": {
                                        "clinic_id": $util.dynamodb.toDynamoDBJson($clinic_id),
                                    }
                                }
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, DynamoScopedClinicGet]
                        TypeName: Query

        CreateUserDataSource:
                Type: AWS::AppSync::DataSource
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        LambdaConfig:
                                LambdaFunctionArn: !GetAtt CreateUser.Arn
                        Name: create_user_lambda
                        ServiceRoleArn: !GetAtt LambdaDataSourceRole.Arn
                        Type: AWS_LAMBDA

        CreateUserResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt CreateUserDataSource.Name
                        FieldName: createUser
                        RequestMappingTemplate: !FindInMap [AppSync, RequestMappings, LambdaAddClinic]
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, LambdaGeneric]
                        TypeName: Mutation

        DeleteUserDataSource:
                Type: AWS::AppSync::DataSource
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        LambdaConfig:
                                LambdaFunctionArn: !GetAtt DeleteUser.Arn
                        Name: delete_user_lambda
                        ServiceRoleArn: !GetAtt LambdaDataSourceRole.Arn
                        Type: AWS_LAMBDA

        DeleteUserResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt DeleteUserDataSource.Name
                        FieldName: deleteUser
                        RequestMappingTemplate: !FindInMap [AppSync, RequestMappings, LambdaAddClinic]
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, LambdaGeneric]
                        TypeName: Mutation

        MakeUserSysAdminDataSource:
                Type: AWS::AppSync::DataSource
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        LambdaConfig:
                                LambdaFunctionArn: !GetAtt MakeUserSysAdmin.Arn
                        Name: make_user_sys_admin_lambda
                        ServiceRoleArn: !GetAtt LambdaDataSourceRole.Arn
                        Type: AWS_LAMBDA

        MakeUserSysAdminResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt MakeUserSysAdminDataSource.Name
                        FieldName: makeUserSysAdmin
                        RequestMappingTemplate: !FindInMap [AppSync, RequestMappings, LambdaAddClinic]
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, LambdaGeneric]
                        TypeName: Mutation

        RemoveUserFromSysAdminsDataSource:
                Type: AWS::AppSync::DataSource
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        LambdaConfig:
                                LambdaFunctionArn: !GetAtt RemoveUserFromSysAdmins.Arn
                        Name: remove_user_from_sys_admins_lambda
                        ServiceRoleArn: !GetAtt LambdaDataSourceRole.Arn
                        Type: AWS_LAMBDA

        RemoveUserFromSysAdminsResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt RemoveUserFromSysAdminsDataSource.Name
                        FieldName: removeUserFromSysAdmins
                        RequestMappingTemplate: !FindInMap [AppSync, RequestMappings, LambdaAddClinic]
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, LambdaGeneric]
                        TypeName: Mutation

        SendCheckInTextDataSource:
                Type: AWS::AppSync::DataSource
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        LambdaConfig:
                                LambdaFunctionArn: !GetAtt SendCheckInText.Arn
                        Name: send_check_in_text_lambda
                        ServiceRoleArn: !GetAtt LambdaDataSourceRole.Arn
                        Type: AWS_LAMBDA

        SendCheckInTextResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt SendCheckInTextDataSource.Name
                        FieldName: sendCheckInText
                        RequestMappingTemplate: !FindInMap [AppSync, RequestMappings, LambdaAddClinic]
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, LambdaGeneric]
                        TypeName: Mutation

        SendTelehealthTextDataSource:
                Type: AWS::AppSync::DataSource
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        LambdaConfig:
                                LambdaFunctionArn: !GetAtt SendTelehealthText.Arn
                        Name: send_telehealth_text_lambda
                        ServiceRoleArn: !GetAtt LambdaDataSourceRole.Arn
                        Type: AWS_LAMBDA

        SendTelehealthTextResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt SendTelehealthTextDataSource.Name
                        FieldName: sendTelehealthText
                        RequestMappingTemplate: !FindInMap [AppSync, RequestMappings, LambdaAddClinic]
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, LambdaGeneric]
                        TypeName: Mutation

        SummonPatientDataSource:
                Type: AWS::AppSync::DataSource
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        LambdaConfig:
                                LambdaFunctionArn: !GetAtt SummonPatient.Arn
                        Name: summon_patient_lambda
                        ServiceRoleArn: !GetAtt LambdaDataSourceRole.Arn
                        Type: AWS_LAMBDA

        SummonPatientResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt SummonPatientDataSource.Name
                        FieldName: summonPatient
                        RequestMappingTemplate: !FindInMap [AppSync, RequestMappings, LambdaAddClinic]
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, LambdaGeneric]
                        TypeName: Mutation

        GetFormsDataSource:
                Type: AWS::AppSync::DataSource
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        LambdaConfig:
                                LambdaFunctionArn: !GetAtt GetForms.Arn
                        Name: get_forms_lambda
                        ServiceRoleArn: !GetAtt LambdaDataSourceRole.Arn
                        Type: AWS_LAMBDA

        GetFormsResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt GetFormsDataSource.Name
                        FieldName: forms
                        RequestMappingTemplate: |
                                #set($unused = $context.source.put("clinic_id", $context.identity.claims.clinic_id))

                                {
                                  "version" : "2017-02-28",
                                  "operation": "Invoke",
                                  "payload": $util.toJson($context.source)
                                }
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, LambdaGeneric]
                        TypeName: Appointment

        GetClinicLocationResolver:
                Type: AWS::AppSync::Resolver
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        DataSourceName: !GetAtt ClinicLocationsDataSource.Name
                        FieldName: clinic_location
                        RequestMappingTemplate: |
                                {
                                    "version": "2017-02-28",
                                    "operation": "GetItem",
                                    "key": {
                                        "clinic_id": $util.dynamodb.toDynamoDBJson($ctx.source.clinic_id),
                                        "clinic_location_id": $util.dynamodb.toDynamoDBJson($ctx.source.clinic_location_id)
                                    }
                                }
                        ResponseMappingTemplate: !FindInMap [AppSync, ResponseMappings, DynamoScopedClinicGet]
                        TypeName: Appointment


        GraphSchema:
                Type: AWS::AppSync::GraphQLSchema
                Properties:
                        ApiId: !GetAtt GraphApi.ApiId
                        Definition: |
                                type Appointment @aws_cognito_user_pools(cognito_groups: ["practitioners"]) {
                                	appointment_id: ID!
                                	status: String!
                                	covid_flag: String
                                	appointment_time: AWSTimestamp!
                                	forms(dummy: String): [String]
                                	clinic_location_id: ID!
                                	clinic_location: ClinicLocation
                                	patient: Patient
                                	practitioner_id: ID!
                                    practitioner: Practitioner
                                	reminder_status: ReminderStatus
                                	check_in_latitude: Float
                                	check_in_longitude: Float
                                	check_in_time: AWSTimestamp
                                }

                                input AppointmentInput {
                                	status: AppointmentStatus
                                	covid_flag: String
                                	appointment_time: AWSTimestamp!
                                	clinic_location_id: ID!
                                	patient_id: ID!
                                	practitioner_id: ID!
                                	reminder_status: ReminderStatus
                                }

                                enum AppointmentStatus {
                                	SCHEDULED
                                	FILLING_FORMS
                                	CHECKED_IN
                                	SUMMONED
                                }

                                type Clinic @aws_cognito_user_pools(cognito_groups: ["practitioners"]) {
                                	clinic_id: ID!
                                	clinic_name: String!
                                	clinic_locations: [ClinicLocation]
                                }

                                input ClinicInput {
                                	clinic_name: String!
                                }

                                type ClinicLocation @aws_cognito_user_pools(cognito_groups: ["practitioners"]) {
                                	clinic_location_name: String!
                                	clinic_location_id: ID!
                                	latitude: String!
                                	longitude: String!
                                	city: String!
                                	#Potentially eventually an Enum
                                	state: String!
                                	zip: String!
                                	address: String!
                                	required_forms: [ID]
                                }

                                input ClinicLocationInput {
                                	clinic_location_name: String!
                                	latitude: String!
                                	longitude: String!
                                	city: String!
                                	state: String!
                                	address: String!
                                	zip: String!
                                	required_forms: [ID]
                                }

                                type Practitioner {
                                	practitioner_id: String!
                                    title: String!
                                	name: String!
                                    telehealth_link: String
                                }

                                input PractitionerInput {
                                	name: String!
                                    title: String!
                                    telehealth_link: String
                                }

                                type Mutation @aws_cognito_user_pools(cognito_groups: ["practitioners"]) {
                                #####
                                ##### BEGIN MUTATIONS
                                #####
                                ###
                                ### Clinic Operations
                                ###
                                ##
                                ##  Appointment CUD
                                ##
                                        createAppointment(
                                        	status: String!,
                                        	appointment_time: AWSTimestamp!,
                                        	patient_id: ID!,
                                        	clinic_location_id: ID!,
                                        	practitioner_id: ID!,
                                        	reminder_status: ReminderStatus
                                        ): Appointment
                                        deleteAppointment(appointment_id: ID!): Appointment
                                        updateAppointment(appointment_id: ID!, appointment: AppointmentInput): Appointment

                                ##
                                ##  Appointment Operations
                                ##
                                        sendCheckInText(appointment_id: ID!): Boolean
                                        sendTelehealthText(appointment_id: ID!): Boolean
                                        summonPatient(appointment_id: ID!): Appointment
                                ##
                                ##  Patient CUD
                                ##
                                        createPatient(patient: PatientInput): Patient
                                        updatePatient(patient_id: ID!, patient: PatientInput!): Patient
                                        deletePatient(patient_id: ID!): Patient


                                ##
                                ##  Practitioner CUD
                                ##
                                        createPractitioner(practitioner: PractitionerInput): Practitioner
                                        updatePractitioner(practitioner_id: ID!, practitioner: PractitionerInput): Practitioner
                                        deletePractitioner(practitioner_id: ID!): Practitioner

                                ##
                                ##  Clinic Location CUD
                                ##
                                        createClinicLocation(clinic_location: ClinicLocationInput): ClinicLocation @aws_cognito_user_pools(cognito_groups: ["practitioners"])
                                        updateClinicLocation(clinic_location_id: ID!, clinic_location: ClinicLocationInput!): ClinicLocation @aws_cognito_user_pools(cognito_groups: ["practitioners"])

                                ##
                                ##  User CUD
                                ##
                                        createUser(username: String, email: AWSEmail): User
                                        deleteUser(username: String!): User
                                        makeUserSysAdmin(username: String!): User @aws_auth(cognito_groups: ["sys-admins"])
                                        removeUserFromSysAdmins(username: String!): User @aws_auth(cognito_groups: ["sys-admins"])
                                ##
                                ## Permission Operations
                                ##
                                        grantPermission(user_id: String!, permission: PermissionInput): User

                                ###
                                ###  Admin Only Operations
                                ###
                                        createClinic(clinic: ClinicInput): Clinic @aws_cognito_user_pools(cognito_groups: ["medfoyer-admins"])

                                #####
                                #####  FIN
                                #####
                                }

                                type Patient @aws_cognito_user_pools(cognito_groups: ["practitioners"]) {
                                	patient_id: ID!
                                	birth_date: AWSDate
                                	given_name: String
                                	last_name: String
                                	appointment_ids: String
                                	appointments: [Appointment]
                                	phone_number: AWSPhone
                                	phone_number_country_code: Int
                                }

                                type PatientAppointment {
                                	appointment_time: Int
                                }

                                input PatientInput {
                                	birth_date: AWSDate!
                                	given_name: String!
                                	last_name: String!
                                	phone_number: AWSPhone
                                	phone_number_country_code: Int!
                                }

                                input PermissionInput {
                                	role: String!
                                	scope: String!
                                }

                                type Query @aws_cognito_user_pools(cognito_groups: ["practitioners"]) {
                                ###
                                ###  Clinic | Scoped to a clinic unless otherwise noted.
                                ###
                                ##
                                ##  Appointment Reads
                                ##
                                        getAppointment(appointment_id: ID!): Appointment
                                        listAppointments(clinic_location_id: ID, start_time: AWSTimestamp, end_time: AWSTimestamp): [Appointment]
                                ##
                                ##   Patient Reads
                                ##
                                        getPatient(patient_id: ID!): Patient
                                        listPatients: [Patient]

                                ##
                                ##  Practitioner Reads
                                ##
                                        getPractitioner(practitioner_id: ID!): Practitioner
                                        listPractitioners: [Practitioner]
                                ##
                                ##  Clinic Reads
                                ##
                                        getClinic: Clinic

                                ##
                                ##  Clinic Location Reads
                                ##
                                        getClinicLocations: [ClinicLocation]
                                ##
                                ##  Internal Reads
                                ##
                                        getContext: String

                                }

                                enum ReminderStatus {
                                	NONE_SENT
                                	FIRST_REMINDER_SENT
                                	CHECK_IN_REMINDER_SENT
                                	OPT_OUT
                                }

                                type User {
                                	username: String!
                                    email: AWSEmail!
                                    is_admin: Boolean!
                                }

                                type WaitlistPosition {
                                	position: Int
                                	expected_wait_time: Int
                                }

                                schema {
                                	query: Query
                                	mutation: Mutation
                                }
